{
  "name": "grunt-global-wrap",
  "keywords": [
    "browserify",
    "commonjs",
    "modules",
    "global",
    "browsers",
    "build",
    "gruntplugin"
  ],
  "description": "Grunt task to expose your CommonJS-based libraries as a global.",
  "version": "1.1.0",
  "author": {
    "name": "Domenic Denicola",
    "email": "domenic@domenicdenicola.com",
    "url": "http://domenicdenicola.com"
  },
  "license": "WTFPL",
  "repository": {
    "type": "git",
    "url": "git://github.com/domenic/grunt-global-wrap.git"
  },
  "bugs": {
    "url": "http://github.com/domenic/grunt-global-wrap/issues"
  },
  "scripts": {
    "test": "grunt test",
    "lint": "jshint tasks"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "dependencies": {
    "global-wrap": ">=1.2.0 <2"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.9",
    "grunt-simple-mocha": "~0.4.0",
    "grunt-contrib-clean": "~0.5.0",
    "jshint": "~2.1.9",
    "jsdom": "~0.8.3"
  },
  "readme": "# Global-ify Your CommonJS, via Grunt\n\nThis is a [Grunt](http://gruntjs.com/) plugin to expose your CommonJS libraries as globals on `window`. It allows you\nto produce build artifiacts that are readily usable by people who haven't embraced the magnificence of\n[browserify](https://github.com/substack/node-browserify). You point it at your main module, and it exposes that as a\nspecified property of the global, bundling up everything it requires (including any native module shims) into the\noutput file.\n\nIt's based on [global-wrap](https://npmjs.org/package/global-wrap), if you want this functionality outside of a Grunt\nplugin.\n\n## Usage\n\nIt takes four options, three of which are required:\n\n- `main`: the file path of your main module, which you want to expose as a global.\n- `global`: the name of the global you want to expose.\n- `dest`: the place where your new global-exposing file should be written.\n- `bundleOptions`: any browserify [bundle options](https://github.com/substack/node-browserify#bbundleopts-cb) you want\n  to pass along, like `debug` or `detectGlobals`. This is the optional option.\n\nHere's a quick sample:\n\n```js\ngrunt.loadNpmTasks(\"grunt-global-wrap\");\n\ngrunt.initConfig({\n    globalwrap: {\n        releaseArtifactsTarget: {\n            main: \"my-main-module.js\",\n            global: \"myModule\",\n            dest: \"release/my-module.global.js\",\n            bundleOptions: { debug: true }\n        }\n    }\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "grunt-global-wrap@1.1.0",
  "dist": {
    "shasum": "89603547738a8e11c4c42515c1e16e30a1671881",
    "tarball": "https://registry.npmjs.org/grunt-global-wrap/-/grunt-global-wrap-1.1.0.tgz"
  },
  "_from": "grunt-global-wrap@>=1.1.0 <2.0.0",
  "_npmVersion": "1.2.32",
  "_npmUser": {
    "name": "domenic",
    "email": "domenic@domenicdenicola.com"
  },
  "maintainers": [
    {
      "name": "domenic",
      "email": "domenic@domenicdenicola.com"
    }
  ],
  "directories": {},
  "_shasum": "89603547738a8e11c4c42515c1e16e30a1671881",
  "_resolved": "https://registry.npmjs.org/grunt-global-wrap/-/grunt-global-wrap-1.1.0.tgz"
}
