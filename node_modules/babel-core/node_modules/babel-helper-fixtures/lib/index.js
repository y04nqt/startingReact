"use strict";

var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;
exports["default"] = get;
exports.multiple = multiple;
exports.readFile = readFile;

var _pathExists = require("path-exists");

var _pathExists2 = _interopRequireDefault(_pathExists);

var _trimRight = require("trim-right");

var _trimRight2 = _interopRequireDefault(_trimRight);

var _tryResolve = require("try-resolve");

var _tryResolve2 = _interopRequireDefault(_tryResolve);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function humanize(val, noext) {
  if (noext) val = _path2["default"].basename(val, _path2["default"].extname(val));
  return val.replace(/-/g, " ");
}

function assertDirectory(loc) {
  if (!_fs2["default"].statSync(loc).isDirectory()) {
    throw new Error("Expected " + loc + " to be a directory.");
  }
}

function shouldIgnore(name, blacklist) {
  if (blacklist && blacklist.indexOf(name) >= 0) {
    return true;
  }

  var ext = _path2["default"].extname(name);
  var base = _path2["default"].basename(name, ext);

  return name[0] === "." || ext === ".md" || base === "LICENSE" || base === "options";
}

function get(entryLoc) {
  var suites = [];

  var rootOpts = {};
  var rootOptsLoc = _tryResolve2["default"](entryLoc + "/options");
  if (rootOptsLoc) rootOpts = require(rootOptsLoc);

  var _loop = function () {
    var push = function push(taskName, taskDir) {
      var actualLocAlias = suiteName + "/" + taskName + "/actual.js";
      var expectLocAlias = suiteName + "/" + taskName + "/expected.js";
      var execLocAlias = suiteName + "/" + taskName + "/exec.js";

      var actualLoc = taskDir + "/actual.js";
      var expectLoc = taskDir + "/expected.js";
      var execLoc = taskDir + "/exec.js";

      if (_fs2["default"].statSync(taskDir).isFile()) {
        var ext = _path2["default"].extname(taskDir);
        if (ext !== ".js" && ext !== ".module.js") return;

        execLoc = taskDir;
      }

      if (_tryResolve2["default"].relative(expectLoc + "on")) {
        expectLoc += "on";
        expectLocAlias += "on";
      }

      var taskOpts = _lodash2["default"].cloneDeep(suite.options);

      var taskOptsLoc = _tryResolve2["default"](taskDir + "/options");
      if (taskOptsLoc) _lodash2["default"].merge(taskOpts, require(taskOptsLoc));

      var test = {
        title: humanize(taskName, true),
        disabled: taskName[0] === ".",
        options: taskOpts,
        exec: {
          loc: execLoc,
          code: readFile(execLoc),
          filename: execLocAlias
        },
        actual: {
          loc: actualLoc,
          code: readFile(actualLoc),
          filename: actualLocAlias
        },
        expect: {
          loc: expectLoc,
          code: readFile(expectLoc),
          filename: expectLocAlias
        }
      };

      // traceur checks

      if (test.exec.code.indexOf("// Async.") >= 0) {
        return;
      }

      suite.tests.push(test);

      var sourceMappingsLoc = taskDir + "/source-mappings.json";
      if (_pathExists2["default"].sync(sourceMappingsLoc)) {
        test.sourceMappings = JSON.parse(readFile(sourceMappingsLoc));
      }

      var sourceMapLoc = taskDir + "/source-map.json";
      if (_pathExists2["default"].sync(sourceMapLoc)) {
        test.sourceMap = JSON.parse(readFile(sourceMapLoc));
      }
    };

    if (_isArray) {
      if (_i >= _iterator.length) return "break";
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) return "break";
      _ref = _i.value;
    }

    var suiteName = _ref;

    if (shouldIgnore(suiteName)) return "continue";

    var suite = {
      options: _lodash2["default"].clone(rootOpts),
      tests: [],
      title: humanize(suiteName),
      filename: entryLoc + "/" + suiteName
    };

    assertDirectory(suite.filename);
    suites.push(suite);

    var suiteOptsLoc = _tryResolve2["default"](suite.filename + "/options");
    if (suiteOptsLoc) suite.options = require(suiteOptsLoc);

    for (_iterator2 = _fs2["default"].readdirSync(suite.filename), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var taskName = _ref2;

      if (shouldIgnore(taskName)) continue;
      push(taskName, suite.filename + "/" + taskName);
    }
  };

  _loop2: for (var _iterator = _fs2["default"].readdirSync(entryLoc), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
    var _ref;

    var _iterator2, _isArray2, _i2;

    var _ref2;

    var _ret = _loop();

    // istanbul ignore next

    switch (_ret) {
      case "break":
        break _loop2;

      case "continue":
        continue;}
  }

  return suites;
}

function multiple(entryLoc, ignore) {
  var categories = {};

  for (var _iterator3 = _fs2["default"].readdirSync(entryLoc), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
    var _ref3;

    if (_isArray3) {
      if (_i3 >= _iterator3.length) break;
      _ref3 = _iterator3[_i3++];
    } else {
      _i3 = _iterator3.next();
      if (_i3.done) break;
      _ref3 = _i3.value;
    }

    var _name = _ref3;

    if (shouldIgnore(_name, ignore)) continue;

    var _loc = _path2["default"].join(entryLoc, _name);
    assertDirectory(_loc);

    categories[_name] = get(_loc);
  }

  return categories;
}

function readFile(filename) {
  if (_pathExists2["default"].sync(filename)) {
    var file = _trimRight2["default"](_fs2["default"].readFileSync(filename, "utf8"));
    file = file.replace(/\r\n/g, "\n");
    return file;
  } else {
    return "";
  }
}